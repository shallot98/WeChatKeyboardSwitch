name: iOS 16.5 Rootless CI

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'ci/**'
      - 'feature/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
      - develop
  workflow_dispatch:

jobs:
  lint:
    name: Lint & Format
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check source formatting
        run: |
          set -euo pipefail
          python3 <<'PY'
import subprocess
import pathlib
import sys

tracked_files = subprocess.check_output(["git", "ls-files"], text=True).splitlines()
interesting_suffixes = (".x", ".xm", ".m", ".mm", ".h", ".c", ".cpp", ".hpp")
explicit_files = {"Makefile", "control"}
failed = False

for relative in tracked_files:
    path = pathlib.Path(relative)
    if not path.is_file():
        continue
    if path.suffix.lower() not in interesting_suffixes and path.name not in explicit_files:
        continue
    try:
        text = path.read_text(encoding="utf-8")
    except UnicodeDecodeError:
        continue
    if text and not text.endswith("\n"):
        print(f"{relative}: missing trailing newline")
        failed = True
    if "\r" in text:
        print(f"{relative}: contains carriage return characters")
        failed = True
    for lineno, line in enumerate(text.splitlines(), start=1):
        if line.rstrip(" \t") != line:
            print(f"{relative}:{lineno}: trailing whitespace")
            failed = True

if failed:
    sys.exit(1)
print("Formatting checks passed.")
PY

      - name: Lint property lists
        run: |
          set -euo pipefail
          PLISTS=$(git ls-files '*.plist')
          if [ -z "$PLISTS" ]; then
            echo "No plist files found."
          else
            while IFS= read -r plist; do
              echo "Linting $plist"
              plutil -lint "$plist"
            done <<< "$PLISTS"
          fi

      - name: Validate control metadata
        run: |
          set -euo pipefail
          python3 <<'PY'
import re
import sys
from pathlib import Path

control_path = Path("control")
required_fields = ["Package", "Name", "Version", "Architecture", "Description"]

if not control_path.exists():
    print("control file is missing")
    sys.exit(1)

text = control_path.read_text(encoding="utf-8")
missing = [field for field in required_fields if not re.search(rf"^{field}:", text, re.MULTILINE)]
if missing:
    for field in missing:
        print(f"Missing required field: {field}")
    sys.exit(1)
print("control file validation passed.")
PY

  build:
    name: Build Package
    runs-on: macos-latest
    needs: lint
    outputs:
      scheme: ${{ steps.config.outputs.scheme }}
      artifact-name: ${{ steps.artifact-meta.outputs.name }}
      package-name: ${{ steps.package-info.outputs.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Resolve build configuration
        id: config
        run: |
          set -euo pipefail
          SCHEME="${{ github.event.inputs.package_scheme }}"
          if [ -z "$SCHEME" ]; then
            SCHEME=rootless
          fi
          echo "scheme=$SCHEME" >> "$GITHUB_OUTPUT"

          MAKE_TARGET="${{ github.event.inputs.make_target }}"
          if [ -z "$MAKE_TARGET" ]; then
            MAKE_TARGET=package
          fi
          echo "make_target=$MAKE_TARGET" >> "$GITHUB_OUTPUT"

          TARGET="${{ github.event.inputs.theos_target }}"
          if [ -z "$TARGET" ]; then
            TARGET="iphone:clang:latest:16.5"
          fi
          echo "target=$TARGET" >> "$GITHUB_OUTPUT"

      - name: Set artifact metadata
        id: artifact-meta
        run: |
          set -euo pipefail
          SCHEME='${{ steps.config.outputs.scheme }}'
          echo "name=wechatkeyboardswitch-${SCHEME}-deb" >> "$GITHUB_OUTPUT"

      - name: Print Xcode information
        run: |
          set -euo pipefail
          xcode-select -p
          xcodebuild -version

      - name: Install build dependencies
        run: |
          set -euo pipefail
          brew update
          brew install ldid dpkg gnu-sed

      - name: Cache Theos
        id: cache-theos
        uses: actions/cache@v4
        with:
          path: ~/theos
          key: ${{ runner.os }}-theos-rootless-v1
          restore-keys: |
            ${{ runner.os }}-theos-

      - name: Install Theos
        if: steps.cache-theos.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          git clone --depth=1 --recursive https://github.com/theos/theos.git "$HOME/theos"

      - name: Ensure Theos toolchain
        run: |
          set -euo pipefail
          TOOLCHAIN_DIR="$HOME/theos/toolchain"
          if [ ! -d "$TOOLCHAIN_DIR" ] || [ -z "$(ls -A "$TOOLCHAIN_DIR" 2>/dev/null)" ]; then
            echo "Installing Theos toolchain..."
            rm -rf "$TOOLCHAIN_DIR"
            git clone --depth=1 https://github.com/theos/toolchain.git "$TOOLCHAIN_DIR"
          else
            echo "Using cached Theos toolchain."
          fi

      - name: Ensure iOS 16.5 SDK
        run: |
          set -euo pipefail
          SDK_ROOT="$HOME/theos/sdks"
          if [ ! -d "$SDK_ROOT/iPhoneOS16.5.sdk" ]; then
            echo "Fetching iOS SDKs..."
            rm -rf "$SDK_ROOT"
            git clone --depth=1 https://github.com/theos/sdks "$SDK_ROOT"
          fi
          if [ ! -d "$SDK_ROOT/iPhoneOS16.5.sdk" ]; then
            echo "iOS 16.5 SDK not found"
            ls -la "$SDK_ROOT" || true
            exit 1
          fi

      - name: Configure build environment
        run: |
          set -euo pipefail
          echo "THEOS=$HOME/theos" >> "$GITHUB_ENV"
          echo "THEOS_PLATFORM_SDK_ROOT=$(xcode-select -p)" >> "$GITHUB_ENV"
          if [ -d "$HOME/theos/toolchain/macos/bin" ]; then
            echo "PATH=$HOME/theos/toolchain/macos/bin:$PATH" >> "$GITHUB_ENV"
          fi

      - name: Build package
        run: |
          set -euo pipefail
          SCHEME='${{ steps.config.outputs.scheme }}'
          TARGET='${{ steps.config.outputs.target }}'
          MAKE_TARGET='${{ steps.config.outputs.make_target }}'

          export THEOS="${THEOS:-$HOME/theos}"
          SDK_PATH="$THEOS/sdks/iPhoneOS16.5.sdk"
          if [ ! -d "$SDK_PATH" ]; then
            echo "Missing iOS 16.5 SDK at $SDK_PATH"
            exit 1
          fi
          export SDKROOT="$SDK_PATH"
          unset THEOS_PLATFORM_SDK_ROOT || true

          make clean
          make "$MAKE_TARGET" THEOS_PACKAGE_SCHEME="$SCHEME" TARGET="$TARGET" FINALPACKAGE=1

          if ! ls packages/*.deb >/dev/null 2>&1; then
            echo "No .deb package produced"
            exit 1
          fi

      - name: Collect package metadata
        id: package-info
        run: |
          set -euo pipefail
          DEB=$(ls packages/*.deb | head -n 1)
          BASENAME=$(basename "$DEB")
          echo "path=$DEB" >> "$GITHUB_OUTPUT"
          echo "name=$BASENAME" >> "$GITHUB_OUTPUT"
          echo "Package built: $BASENAME"

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-meta.outputs.name }}
          path: packages/*.deb
          if-no-files-found: error

      - name: Build summary
        run: |
          cat <<EOF >> "$GITHUB_STEP_SUMMARY"
### Build Summary

- Scheme: ${{ steps.config.outputs.scheme }}
- Target: ${{ steps.config.outputs.target }}
- Artifact: ${{ steps.package-info.outputs.name }}
EOF

  release:
    name: Publish Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist

      - name: Show downloaded files
        run: |
          set -euo pipefail
          ls -R dist

      - name: Prepare release notes
        run: |
          set -euo pipefail
          RAW_VERSION="${GITHUB_REF#refs/tags/}"
          CLEAN_VERSION="${RAW_VERSION#v}"
          cat <<EOF > release_notes.md
## WeChat Keyboard Switch ${CLEAN_VERSION}

### What's included
- Rootless iOS 16.5+ build
- arm64 architecture
- Packaged as Debian (.deb)

### Installation
1. Download the \`.deb\` file attached below
2. Install via your preferred package manager (Sileo, Zebra, etc.) **or** over SSH:
   ```bash
   dpkg -i com.example.wechatkeyboardswitch_*.deb
   killall SpringBoard
   ```

### Requirements
- Rootless jailbreak (Dopamine, Palera1n, ...)
- mobilesubstrate
- firmware >= 15.0

_This package was built automatically by GitHub Actions on $(date -u +"%Y-%m-%d %H:%M:%S UTC")._
EOF

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.deb
          body_path: release_notes.md
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release summary
        run: |
          cat <<EOF >> "$GITHUB_STEP_SUMMARY"
### Release Published

- Tag: ${{ github.ref_name }}
- Artifact: $(ls dist/*.deb | xargs -n1 basename)
EOF
